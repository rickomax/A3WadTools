using System;
using System.Globalization;
using System.IO;
using System.Threading;
using MarcelJoachimKloubert.DWAD;
using MarcelJoachimKloubert.DWAD.WADs.Lumps.Sectors;
using MarcelJoachimKloubert.DWAD.WADs.Lumps.Things;
using MarcelJoachimKloubert.DWAD.WADs.Lumps.Vertexes;

namespace WAD2WMP
{
    internal class Program
    {
        private const string HeaderTemplate = "#  This file \"{0}\" was generated by WED v3.29\r\n#  World EDitor for 3D GameStudio by conitec GmbH 1996/1997\r\n#  creation date: {1}    time: {2}";
        private const string VertexHeaderTemplate = "\r\n\r\n\r\n\r\n#vertex\txpos ypos zpos index\r\n#-------------------------------\r\n";
        private const string RegionHeaderTemplate = "\r\n\r\n\r\n\r\n#region\tname\tfloor_hgt\tceil_hgt\r\n#---------------------------------\r\n";
        private const string ThingsHeaderTemplate = "\r\n\r\n\r\n\r\n#player_start\r\n#thing\r\n#actor name xpos ypos angle region index\r\n#---------------------------------------\r\n";
        private const string VertexTemplate = "VERTEX\t{0} {1} 0;#{2}\r\n";
        private const string RegionTemplate = "REGION\t{0} {1} {2};#{3}\r\n";
        private const string ThingTemplate = "{0}\t{1} {2} {3} {4};#{5}\r\n";

        static void Main(string[] args)
        {
            Thread.CurrentThread.CurrentCulture = CultureInfo.InvariantCulture;
            if (args.Length == 0)
            {
                Console.WriteLine("WAD2WMP - Usage: <WAD Filename> <WMP Filename>");
                Console.ReadKey();
                return;
            }
            var wadFilename = args[0];
            if (!File.Exists(wadFilename))
            {
                Console.WriteLine($"\"{wadFilename}\" not found");
                Console.ReadKey();
                return;
            }
            var wmpFilename = args[1];
            using (var outputStream = File.OpenWrite(wmpFilename))
            {
                using (var streamWriter = new StreamWriter(outputStream))
                {
                    using (var inputStream = File.OpenRead(wadFilename))
                    {
                        foreach (var wadFile in WADFileFactory.FromStream(inputStream))
                        {
                            streamWriter.Write(HeaderTemplate);
                            foreach (var lump in wadFile.EnumerateLumps())
                            {
                                if (lump is IVertexesLump vertexesLump)
                                {
                                    streamWriter.Write(VertexHeaderTemplate);
                                    var vertexIndex = 0;
                                    foreach (var vertex in vertexesLump.EnumerateVertexes())
                                    {
                                        streamWriter.Write(VertexTemplate, vertex.X, vertex.Y, vertexIndex++);
                                    }
                                }
                                else if (lump is ISectorsLump sectorsLump)
                                {
                                    streamWriter.Write(RegionHeaderTemplate);
                                    var sectorIndex = 0;
                                    foreach (var sector in sectorsLump.EnumerateSectors())
                                    {
                                        streamWriter.Write(RegionTemplate, FindRegion(sector), sector.FloorHeight, sector.CeilingHeight, sectorIndex++);
                                    }
                                }
                                else if (lump is IThingsLump thingsLump)
                                {
                                    streamWriter.Write(ThingsHeaderTemplate);
                                    var thingIndex = 0;
                                    foreach (var thing in thingsLump.EnumerateThings())
                                    {
                                        if (thing.Type == 1)
                                        {
                                            streamWriter.Write(ThingTemplate, "PLAYER_START", thing.X, thing.Y, thing.Angle, FindRegion(thing), thingIndex++);
                                        }
                                    }
                                }
                            }
                            return;
                        }
                    }
                }
            }
        }

        private static string FindRegion(ISector sector)
        {
            return "0";
        }

        private static string FindRegion(IThing thing)
        {
            return "0";
        }
    }
}
